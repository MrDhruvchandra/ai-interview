export const mockUsers = [
  {
    id: 'user1',
    name: 'John Doe',
    email: 'user@example.com',
    password: 'password123',
    isAdmin: false,
  },
  {
    id: 'admin1',
    name: 'Admin User',
    email: 'admin@example.com',
    password: 'password123',
    isAdmin: true,
  }
];

export const mockRoles = [
  'Frontend Developer',
  'Backend Developer',
  'Full Stack Developer',
  'Data Scientist',
  'DevOps Engineer',
  'UI/UX Designer',
  'Product Manager',
  'QA Engineer',
  'Machine Learning Engineer',
  'Mobile Developer',
];

export const mockExperienceLevels = [
  'Entry Level (0-2 years)',
  'Mid Level (2-5 years)',
  'Senior (5-8 years)',
  'Lead/Principal (8+ years)',
];

export const mockTopics = {
  'Frontend Developer': [
    'React',
    'Vue',
    'Angular',
    'JavaScript',
    'TypeScript',
    'CSS',
    'HTML',
    'Web Performance',
    'Accessibility',
    'State Management',
  ],
  'Backend Developer': [
    'Node.js',
    'Python',
    'Java',
    'Go',
    'Databases',
    'API Design',
    'Authentication',
    'Microservices',
    'Message Queues',
    'Security',
  ],
  'Full Stack Developer': [
    'React',
    'Node.js',
    'Databases',
    'API Design',
    'Authentication',
    'DevOps',
    'System Design',
    'Performance Optimization',
    'Security',
    'Testing Strategies',
  ],
  'Data Scientist': [
    'Python',
    'R',
    'Machine Learning',
    'Deep Learning',
    'Data Visualization',
    'Statistical Analysis',
    'Big Data',
    'Natural Language Processing',
    'Computer Vision',
    'Time Series Analysis',
  ],
  'DevOps Engineer': [
    'CI/CD',
    'Infrastructure as Code',
    'Docker',
    'Kubernetes',
    'AWS',
    'Azure',
    'Monitoring',
    'Security',
    'Linux',
    'Networking',
  ],
  'UI/UX Designer': [
    'User Research',
    'Wireframing',
    'Prototyping',
    'Visual Design',
    'Design Systems',
    'Usability Testing',
    'Accessibility',
    'Information Architecture',
    'Interaction Design',
    'Design Tools',
  ],
  'Product Manager': [
    'Product Strategy',
    'Roadmapping',
    'User Stories',
    'Market Research',
    'Stakeholder Management',
    'Data Analysis',
    'Agile Methodologies',
    'Prioritization',
    'Product Metrics',
    'User Feedback',
  ],
  'QA Engineer': [
    'Test Planning',
    'Test Automation',
    'Manual Testing',
    'Performance Testing',
    'Security Testing',
    'API Testing',
    'Mobile Testing',
    'Test Management',
    'CI/CD Integration',
    'Bug Tracking',
  ],
  'Machine Learning Engineer': [
    'Python',
    'TensorFlow',
    'PyTorch',
    'Model Deployment',
    'Feature Engineering',
    'MLOps',
    'Deep Learning',
    'Natural Language Processing',
    'Computer Vision',
    'Reinforcement Learning',
  ],
  'Mobile Developer': [
    'React Native',
    'Flutter',
    'iOS',
    'Android',
    'Mobile UI/UX',
    'Offline Storage',
    'Performance Optimization',
    'API Integration',
    'Authentication',
    'Push Notifications',
  ],
};

export const mockDurations = [
  15,
  30,
  45,
  60,
];

export const mockInterviews = [
  {
    id: 'int1',
    userId: 'user1',
    role: 'Frontend Developer',
    experienceLevel: 'Mid Level (2-5 years)',
    topics: ['React', 'JavaScript', 'CSS'],
    duration: 30,
    date: '2025-04-15T14:30:00Z',
    score: 78,
    status: 'completed',
  },
  {
    id: 'int2',
    userId: 'user1',
    role: 'Frontend Developer',
    experienceLevel: 'Mid Level (2-5 years)',
    topics: ['TypeScript', 'React', 'State Management'],
    duration: 45,
    date: '2025-04-10T10:15:00Z',
    score: 65,
    status: 'completed',
  },
  {
    id: 'int3',
    userId: 'user1',
    role: 'Frontend Developer',
    experienceLevel: 'Mid Level (2-5 years)',
    topics: ['Web Performance', 'JavaScript', 'Accessibility'],
    duration: 30,
    date: '2025-04-05T16:45:00Z',
    score: 82,
    status: 'completed',
  },
];

export const mockInterviewDetails = {
  'int1': {
    questions: [
      {
        id: 'q1',
        text: 'Can you explain the difference between controlled and uncontrolled components in React?',
        timeSpent: 124,
        answer: 'Controlled components are those where form data is handled by React state. The component state becomes the single source of truth. Uncontrolled components are where form data is handled by the DOM itself, and you would use refs to get values from the DOM rather than setting state.',
        feedback: 'Good explanation of the core concepts. Could have provided an example of each type of component to demonstrate practical understanding.',
        score: 80,
      },
      {
        id: 'q2',
        text: 'How would you optimize the performance of a React application?',
        timeSpent: 187,
        answer: 'I would use several techniques: implementing React.memo for functional components to prevent unnecessary re-renders, using useCallback and useMemo hooks to memoize functions and computed values, code splitting with React.lazy and Suspense to reduce initial load time, and virtualizing long lists with libraries like react-window.',
        feedback: 'Comprehensive answer covering multiple optimization techniques. Demonstrated strong understanding of React performance considerations.',
        score: 95,
      },
      {
        id: 'q3',
        text: 'Explain how CSS specificity works and how to manage it in large projects.',
        timeSpent: 156,
        answer: 'CSS specificity determines which style rules apply when multiple rules target the same element. It\'s calculated based on the types of selectors: inline styles have highest specificity, then IDs, classes/attributes, and elements. In large projects, I manage this by using methodologies like BEM (Block Element Modifier) to create namespaced classes, using CSS modules or styled components for component-based styles, and avoiding high-specificity selectors like IDs for styling.',
        feedback: 'Good explanation of specificity calculation. The approach to managing specificity in large projects shows practical experience.',
        score: 85,
      },
      {
        id: 'q4',
        text: 'What are closures in JavaScript and how might you use them?',
        timeSpent: 143,
        answer: 'Closures are functions that have access to variables from their outer scope, even after that outer function has returned. They\'re created whenever a function is defined inside another function. I use closures for data privacy (creating private variables), factory functions, and for maintaining state in callback functions.',
        feedback: 'Clear definition of closures. Could have included a code example to illustrate the concept better.',
        score: 75,
      },
    ],
    summary: {
      strengths: [
        'Strong understanding of React performance optimization',
        'Good knowledge of modern JavaScript concepts',
        'Clear communication style',
      ],
      weaknesses: [
        'Could provide more concrete examples when explaining concepts',
        'Some hesitation when discussing CSS specificity',
      ],
      overallFeedback: 'Overall a strong interview showing good technical knowledge. The candidate demonstrates solid understanding of React and JavaScript fundamentals. To improve, consider preparing concrete code examples for key concepts and practicing more detailed explanations of CSS topics.',
      recommendedResources: [
        'Advanced React Patterns by Kent C. Dodds',
        'CSS for JS Developers by Josh Comeau',
        'JavaScript: The Hard Parts by Will Sentance',
      ],
    },
  }
};

export const mockPerformanceData = {
  'user1': {
    skillProgress: [
      { skill: 'React', scores: [65, 72, 80] },
      { skill: 'JavaScript', scores: [70, 75, 75] },
      { skill: 'CSS', scores: [60, 65, 85] },
      { skill: 'TypeScript', scores: [55, 65] },
    ],
    scoresByMonth: [
      { month: 'Jan', score: 65 },
      { month: 'Feb', score: 68 },
      { month: 'Mar', score: 72 },
      { month: 'Apr', score: 78 },
    ],
    interviewCount: 12,
    averageScore: 72,
    topPerformingSkill: 'React',
    weakestSkill: 'TypeScript',
  }
};

export const mockUsers2 = [
  {
    id: 'user1',
    name: 'John Doe',
    email: 'user@example.com',
    registeredDate: '2025-01-15',
    interviewsCompleted: 12,
    lastActive: '2025-04-15',
  },
  {
    id: 'user2',
    name: 'Jane Smith',
    email: 'jane@example.com',
    registeredDate: '2025-02-03',
    interviewsCompleted: 8,
    lastActive: '2025-04-14',
  },
  {
    id: 'user3',
    name: 'Michael Johnson',
    email: 'michael@example.com',
    registeredDate: '2025-02-17',
    interviewsCompleted: 5,
    lastActive: '2025-04-10',
  },
  {
    id: 'user4',
    name: 'Emily Williams',
    email: 'emily@example.com',
    registeredDate: '2025-03-05',
    interviewsCompleted: 3,
    lastActive: '2025-04-13',
  },
  {
    id: 'user5',
    name: 'David Brown',
    email: 'david@example.com',
    registeredDate: '2025-03-22',
    interviewsCompleted: 2,
    lastActive: '2025-04-12',
  },
];

export const mockPlatformStats = {
  totalUsers: 354,
  activeUsersLast7Days: 187,
  totalInterviews: 1256,
  averageScore: 73,
  popularRoles: [
    { role: 'Frontend Developer', count: 487 },
    { role: 'Full Stack Developer', count: 342 },
    { role: 'Data Scientist', count: 198 },
    { role: 'Backend Developer', count: 156 },
    { role: 'Product Manager', count: 73 },
  ],
  userGrowth: [
    { month: 'Jan', users: 57 },
    { month: 'Feb', users: 124 },
    { month: 'Mar', users: 231 },
    { month: 'Apr', users: 354 },
  ],
  interviewsByDay: [
    { day: 'Mon', count: 42 },
    { day: 'Tue', count: 38 },
    { day: 'Wed', count: 35 },
    { day: 'Thu', count: 37 },
    { day: 'Fri', count: 45 },
    { day: 'Sat', count: 65 },
    { day: 'Sun', count: 53 },
  ],
};